version: 2.1
commands:
  destroy-environment:
    description: Destroy cloudformation stacks given a workflow ID.
    parameters:
      stacks-ID:
        type: string
    steps:
      - run:
          name: Destroy server
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name server-stack-<< parameters.stacks-ID >>
      
jobs:
  linting-dockerfile:
    machine: true
    steps:
      - checkout
      - run: 
          name: linting docker file
          command: docker run --rm -i hadolint/hadolint < Dockerfile

  upload-image:
    machine: true
    steps:
      - checkout
      - run: 
          name: login to docker hub
          command: echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
      - run: 
          name: build docker image
          command: docker build -t $DOCKERHUB_USERNAME/capstone .
      - run: 
          name: push docker image
          command: docker push $DOCKERHUB_USERNAME/capstone

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - when:
          condition: true
            # you should remove the infra_exists env var to not_exist to create the infra
            # otherwise it will skip this step
            # if you have existance infra you should set server_ip env var
            # not: '{{ .Environment.infra_exists }}'
          steps:
            - run:
                name: Ensure server infrastructure exists
                command: |
                  aws cloudformation deploy \
                    --template-file .circleci/cloudformation/server.yml \
                    --stack-name "server-stack-$CIRCLE_WORKFLOW_ID" \
                    --parameter-overrides ID=$CIRCLE_WORKFLOW_ID  
            - run:
                name: Add back-end ip to ansible inventory
                command: |
                  aws ec2 describe-instances \
                    --filters "Name=tag:Name,Values=server-$CIRCLE_WORKFLOW_ID" \
                    --query 'Reservations[*].Instances[*].PublicDnsName' \
                    --output text >> .circleci/ansible/inventory.txt
                  cat .circleci/ansible/inventory.txt
            - destroy-environment:
                stacks-ID: $CIRCLE_WORKFLOW_ID
      - save_cache:
          paths: [".circleci/ansible/inventory.txt"]
          key: inventory-{{ .Environment.CIRCLE_WORKFLOW_ID }}

  configure-infrastructure:
    docker:
      - image: python
    environment:
      ANSIBLE_HOST_KEY_CHECKING: False
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "8c:12:f9:c8:21:1d:5e:82:5e:bc:ad:bf:2f:3c:98:b1"
      - restore_cache:
          keys: ["inventory-{{ .Environment.CIRCLE_WORKFLOW_ID }}"]
      - run:
          name: install dependancies
          command: pip install ansible
      - when:
          condition: true
            # you should remove the infra_exists env var to not_exist to create the infra
            # otherwise it will skip this step
            # if you have existance infra you should set server_ip env var
            # not: '{{ .Environment.infra_exists }}'
          steps:
            - run:
                name: deploy k8s cluster
                working_directory: .circleci/ansible/
                command: |
                  ansible-playbook -i inventory.txt deploy-cluster.yml 
            - destroy-environment:
                stacks-ID: $CIRCLE_WORKFLOW_ID
      - run:
          name: run server
          working_directory: .circleci/ansible/
          command: |
            ansible-playbook -i inventory.txt run-server.yml   

workflows:
  default:
    jobs:
      # - linting-dockerfile
      # - upload-image:
      #     requires: [linting-dockerfile]
      #     context:
      #       - DOCKERHUB
      - deploy-infrastructure:
          # requires: [upload-image]
          context:
            - AWS
      - configure-infrastructure:
          requires: [deploy-infrastructure]